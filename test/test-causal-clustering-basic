#!/usr/bin/env bash
set -o errexit -o nounset

. "$(dirname "$0")/helpers.sh"

readonly image="$1"
readonly series="$2"
readonly edition="$3"

if [[ "${series}" == "2.3" ]] || [[ "${series}" == "3.0" ]]; then
  echo "Skipping: Causal-Clustering not available pre 3.1"
  exit 0
fi

if ! [[ "${edition}" == "enterprise" ]]; then
  echo "Skipping: Causal-Clustering only available in enterprise"
  exit 0
fi

if ! which docker-compose >/dev/null; then
  echo "Skipping: no docker-compose in path"
  exit 0
fi

# Make a temp copy of compose file
mkdir -p tmp/out
readonly compose_file=$(mktemp tmp/out/XXXXXXXX.yml)

cp "$(dirname "$0")/causal-cluster-compose.yml" "${compose_file}"

readonly cname="core-$(uuidgen)"
readonly rname="read-$(uuidgen)"
readonly backup_name="backup-$(uuidgen)"

readonly logs_id="$(pwgen -1 --no-capitalize 8 1)"
readonly logs_dir="tmp/out/${logs_id}"

docker_compose_up "${image}" "${compose_file}" "${cname}" "${rname}" "$(pwd)/${logs_dir}"
readonly core_ip="$(docker_compose_ip "${cname}")"
readonly read_ip="$(docker_compose_ip "${rname}")"
# Make sure core and read replica are up
neo4j_wait "${core_ip}" "" "120"
neo4j_wait "${read_ip}" "" "120"

# create node on core
neo4j_createnode "${core_ip}" "neo4j:neo"
# read back on read replica
neo4j_readnode "${read_ip}" "neo4j:neo"

echo "Successfully wrote and read back from the causal cluster"

# take a backup using the catchup protocol
readonly backup_dir="$(mktemp --directory)"
readonly backup_logs_dir="${logs_dir}/backup"
mkdir --parents "${backup_logs_dir}"
readonly backup_output="${backup_logs_dir}/neo4j-admin"
echo "Checking that we can take a backup"

assert_backup_success() {
    if [[ "$(tail -n1 "${backup_output}.stdout")" != *"Backup complete."* ]]; then
        cat "${backup_output}."*
        echo "Backup did not succeed"
        exit 1
    fi
    if [[ "$(ls "${backup_dir}" | wc -l)" -lt 1 ]]; then
        cat "${backup_output}."*
        echo "No backup files found in backup directory ${backup_dir}"
        exit 1
    fi
    if [[ "$(ls "${backup_dir}/${backup_name}" | wc -l)" -lt 1 ]]; then
        cat "${backup_output}."*
        echo "No backup files found in backup directory ${backup_dir}/${backup_name}"
        exit 1
    fi
}

backup_container="$(docker run -d --network="${COMPOSE_NETWORK}" \
                --user="$(id -u):$(id -g)" \
                --volume="${backup_dir}":/backup \
                --volume="$(pwd)/${backup_logs_dir}":/logs \
                --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
                --env=NEO4J_DEBUG=yes \
                "${image}" neo4j-admin backup \
                --protocol=catchup \
                --from="core3:6362" \
                --backup-dir=/backup \
                --database="graph.db" \
                --check-consistency=true \
                --name="${backup_name}")"

get_completed_container_output "${backup_container}" "${backup_output}"
assert_backup_success
echo "Backup succeeded"

echo "Checking that we can restore a backup"
# runs neo4j-admin restore on the backup.
# N.b. This doesnt actually check that we can start a neo4j instance using the restored store,
# or that it contains the data we backed up

readonly restore_logs_dir="${logs_dir}/restore"
mkdir --parents "${restore_logs_dir}"
readonly restore_output="${restore_logs_dir}/neo4j-admin"
readonly restore_dir="$(mktemp --directory)"

assert_restore_success() {
    if [[ "$(ls "${restore_dir}" | wc -l)" -lt 1 ]]; then
        cat "${restore_output}."*
        echo "No restore files found in restore directory ${restore_dir}"
        exit 1
    fi
    if [[ "$(ls "${restore_dir}/databases/graph.db/" | wc -l)" -lt 1 ]]; then
        cat "${restore_output}."*
        echo "No backup files found in restore directory ${restore_dir}/databases/graph.db/"
        exit 1
    fi
}

restore_container="$(docker run -d \
                --user="$(id -u):$(id -g)" \
                --volume="${backup_dir}":/backup \
                --volume="${restore_dir}":/data \
                --volume="$(pwd)/${restore_logs_dir}":/logs \
                --env=NEO4J_DEBUG=yes \
                --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
                "${image}" neo4j-admin restore \
                --from="/backup/${backup_name}" \
                --database="graph.db")"

get_completed_container_output "${restore_container}" "${restore_output}"
assert_restore_success
echo "Restore succeeded."
